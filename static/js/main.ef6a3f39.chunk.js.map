{"version":3,"sources":["actions/index.js","containers/AddTodo.js","components/Todo.js","components/Arrow.js","components/TodoList.js","containers/VisibleTodoList.js","components/CompletedTable.js","containers/ShowCompletedTable.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["nextTodoId","VisibilityFilters","connect","_ref","input","dispatch","react_default","a","createElement","onSubmit","e","text","preventDefault","value","trim","type","id","Input_default","inputRef","node","className","Button_default","variant","color","Todo","onClick","completed","stepNumber","blue","classNames","style","textDecoration","concat","Arrow","totalSteps","arrow","ArrowRightAlt_default","TodoList","_this","this","props","todos","map","todo","index","src_components_Todo","Object","assign","key","toggleTodo","src_components_Arrow","length","React","Component","state","filter","t","Error","getVisibleTodos","visibilityFilter","isFirstStep","CompletedTodoList","class","completedTodos","CompletedTable","App","containers_AddTodo","ShowCompletedTable","VisibleTodoList","arguments","undefined","action","toConsumableArray","objectSpread","combineReducers","store","createStore","rootReducer","devToolsEnhancer","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.ef6a3f39.chunk.js","sourcesContent":["let nextTodoId = 0\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n\nexport const setVisibilityFilter = filter => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter\n})\n\nexport const toggleTodo = (id, isFirstStep) => ({\n  type: 'TOGGLE_TODO',\n  id,\n  isFirstStep\n})\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions'\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\n\nconst AddTodo = ({ dispatch }) => {\n  let input\n\n  return (\n    <div>\n      <form onSubmit={e => {\n        e.preventDefault()\n        if (!input.value.trim()) {\n          return\n        }\n        dispatch(addTodo(input.value))\n        input.value = ''\n      }}>\n        <Input inputRef={node => input = node} className=\"mainInput\"/>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Add Step\n        </Button>\n      </form>\n    </div>\n  )\n}\n\nexport default connect()(AddTodo)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport \"./Todo.css\";\nimport classNames from 'classnames';\n\nconst Todo = ({ onClick, completed, text, stepNumber }) => {\n  let blue = classNames({\n    'blue': stepNumber ===0\n  });\n return( <span\n    onClick={onClick}\n    className={blue}\n    style={{\n      textDecoration: completed ? 'line-through' : 'none'\n    }}\n  >\n    {`${text}`}\n  </span>\n);\n}\n\nTodo.propTypes = {\n  onClick: PropTypes.func,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ArrowRight from '@material-ui/icons/ArrowRightAlt';\n\nimport './Arrow.css';\nconst Arrow = ({stepNumber, totalSteps}) => {\n    let arrow = (totalSteps !== stepNumber + 1 && totalSteps !== 1) ?  <ArrowRight/>  : \" \"\n    \n    return <span className=\"arrow\">{arrow}</span>\n}\n\n  Arrow.propTypes = {\n    stepNumber: PropTypes.number.isRequired,\n    totalSteps: PropTypes.number.isRequired\n  }\n\n\n  export default Arrow","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\nimport Arrow from './Arrow';\nimport './TodoList.css'\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.todos.map((todo, index) =>\n\n          <span>\n            <Todo\n              key={todo.id}\n              stepNumber={index}\n              {...todo}\n              onClick={() => this.props.toggleTodo(todo.id, index === 0)}\n            />\n            <Arrow stepNumber={index} totalSteps={this.props.todos.length} />\n          </span>\n        )}\n      </div>\n    )\n  }\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList\n","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport TodoList from '../components/TodoList'\nimport { VisibilityFilters } from '../actions'\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n      return todos\n    case VisibilityFilters.SHOW_COMPLETED:\n      return todos.filter(t => t.completed)\n    case VisibilityFilters.SHOW_ACTIVE:\n      return todos.filter(t => !t.completed)\n    default:\n      throw new Error('Unknown filter: ' + filter)\n  }\n}\n\nconst mapStateToProps = state => ({\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: (id, isFirstStep) => dispatch(toggleTodo(id, isFirstStep))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo';\nimport './CompletedTable.css'\nclass CompletedTodoList extends React.Component {\n    render() {\n        return (\n            <table class=\"completedTable\">\n            {(this.props.completedTodos[0]) ? <th>Completed Steps</th>: \"\"}\n                {this.props.completedTodos.map((todo) =>\n                    <tr  key={todo.id} ><td key={todo.id}><Todo\n                        key={todo.id}\n                        {...todo}/>\n                    </td></tr>\n                )}\n            </table>\n        );\n    }\n}\n\nCompletedTodoList.propTypes = {\n    completedTodos: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        completed: PropTypes.bool.isRequired,\n        text: PropTypes.string.isRequired\n    }).isRequired).isRequired\n};\n\nexport default CompletedTodoList;\n","import { connect } from 'react-redux'\nimport CompletedTable from '../components/CompletedTable'\n\nconst getCompletedTodos = (todos) => {\n    return todos.filter(t => t.completed)\n}\n\nconst mapStateToProps = state => ({\n  completedTodos: getCompletedTodos(state.todos)\n})\n\n\nexport default connect(\n  mapStateToProps\n)(CompletedTable)\n","import React from 'react'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\nimport ShowCompletedTable from '../containers/ShowCompletedTable';\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <ShowCompletedTable/>\n    <VisibleTodoList />\n  </div>\n)\n\nexport default App\n","const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id && action.isFirstStep) ? {...todo, completed: !todo.completed} : todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos\n","import { VisibilityFilters } from '../actions'\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ACTIVE, action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nexport default combineReducers({\n  todos,\n  visibilityFilter\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, /* preloadedState, */ devToolsEnhancer(\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}